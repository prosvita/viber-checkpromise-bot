'use strict'

const TextMessage = require('viber-bot').Message.Text
const UrlMessage = require('viber-bot').Message.Url
const Sessions = require('./sessions')

class Notifier {
    constructor (logger, bot) {
        this.logger = logger
        this.bot = bot
        this.sessions = new Sessions('db/session.json')
    }

    subscribe () {
        return (response) => {
            this.sessions.update(response.userProfile)
            response.send([
                new TextMessage(`–ü—Ä–∏–≤—ñ—Ç!
–Ø –±—É–¥—É —Ç–µ–±–µ —Å–ø–æ–≤—ñ—â–∞—Ç–∏, —è–∫—â–æ —â–æ—Å—å –∑–º—ñ–Ω–∏—Ç—å—Å—è —Å–µ—Ä–µ–¥ –≤–∞–∂–ª–∏–≤–∏—Ö –µ–∫–æ–Ω–æ–º—ñ—á–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤, —á–∏ –±—É–¥—É—Ç—å –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏—Å—å –æ–±—ñ—Ü—è–Ω–∫–∏ –≤–ª–∞–¥–∏.
–ü–æ–¥—Ä–æ–±–∏—Ü—ñ –Ω–∞ —Å–∞–π—Ç—ñ`),
                new UrlMessage('https://www.checkpromise.info/?utm_medium=referral&utm_source=viber_bot&utm_campaign=start')
            ])
            this.logger.info(`Subscribed: ${response.userProfile.id}`)
        }
    }

    unsubscribe () {
        return (userId) => {
            this.sessions.update({id: userId}, true)
            this.logger.info(`Unsubscribed: ${userId}`)
        }
    }

    received () {
        return (message, response) => {
            this.sessions.update(response.userProfile)

            if (!(message instanceof TextMessage)) {
                response.send(new TextMessage('–ü—ñ–¥—Ç—Ä–∏–º—É—é, —Ö–æ—á–∞ —ñ –Ω–µ —Ä–æ–∑—É–º—ñ—é —Ü—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è :)'))
            }
        }
    }

    anyText () { /* eslint class-methods-use-this: "off" */
        return (message, response) => {
            response.send(new TextMessage('–í–∏–±–∞—á, —è —â–µ –Ω–µ –≤–º—ñ—é —á–∏—Ç–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –≤—Å–µ –±—É–¥–µ –∑–≥–æ–¥–æ–º ;)'))
        }
    }

    async notify (changes) {
        if (!changes.length) {
            return
        }

        const userProfiles = this.sessions.getEnabledProfiles()
        const message = this.makeMessage(changes)

        for (const userProfile of userProfiles) {
            try {
                await this.bot.sendMessage(userProfile, message) /* eslint no-await-in-loop: "off" */
                this.logger.info(`MADE sendMessage ${userProfile.id}`)
            } catch (error) {
                this.logger.error(`ERROR sendMessage ${error.message}`)
            }
        }
    }

    makeMessage (changes) { /* eslint class-methods-use-this: "off" */
        const message = []

        for (const change of changes) {
            if (change.news) {
                message.push(new TextMessage(change.news))
            } else if (change.measure === 'completed') {
                if (change.newValue) {
                    message.push(new TextMessage(`‚úÖ –í–∏–∫–æ–Ω–∞–Ω–µ!\n${change.description}`))
                }
            } else {
                message.push(new TextMessage(`${(change.oldValue < change.newValue) === change.invertArrow ? 'üòÄ –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è!' : 'ü§¢ –ó—Ä–∞–¥–∞!'
                }\n${change.description} ${change.oldValue < change.newValue ? '‚Üë' : '‚Üì'
                } ${change.newValue} ${change.quantity} ${change.measure}`))
                message.push(new UrlMessage(`https://www.checkpromise.info/${change.id}?utm_medium=referral&utm_source=viber_bot`))
            }
        }

        return message
    }
}

module.exports = Notifier
