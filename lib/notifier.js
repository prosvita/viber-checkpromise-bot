'use strict'

const TextMessage = require('viber-bot').Message.Text
const UrlMessage = require('viber-bot').Message.Url
const Sessions = require('./sessions')
const ClearText = require('./clear_text')

class Notifier {
    constructor (logger, bot) {
        this.logger = logger
        this.bot = bot
        this.sessions = new Sessions('db/session.json')
        this.clearText = new ClearText(logger)
    }

    started () {
        return (response) => {
            this.sessions.update(response.userProfile)
            response.send([
                new TextMessage(`–ü—Ä–∏–≤—ñ—Ç!
–Ø –±—É–¥—É —Ç–µ–±–µ —Å–ø–æ–≤—ñ—â–∞—Ç–∏, —è–∫—â–æ —â–æ—Å—å –∑–º—ñ–Ω–∏—Ç—å—Å—è —Å–µ—Ä–µ–¥ –≤–∞–∂–ª–∏–≤–∏—Ö –µ–∫–æ–Ω–æ–º—ñ—á–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤, —á–∏ –±—É–¥—É—Ç—å –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏—Å—å –æ–±—ñ—Ü—è–Ω–∫–∏ –≤–ª–∞–¥–∏.
–©–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–°—Ç–µ–∂–∏—Ç–∏!".`,
                    {/* eslint indent: "off" */
                        Type: 'keyboard',
                        Buttons: [{
                            ActionType: 'reply',
                            ActionBody: '/subscribe',
                            Text: '–°—Ç–µ–∂–∏—Ç–∏!'
                        }]
                    }
                )
            ])
            this.logger.info(`Started: ${response.userProfile.id}`)
        }
    }

    subscribe () {
        return (response) => {
            this.sessions.update(response.userProfile)
            this.logger.info(`Subscribed: ${response.userProfile.id}`)
        }
    }

    subscribed () {
        return (message, response) => {
            response.send([
                new UrlMessage('https://www.checkpromise.info/?utm_medium=referral&utm_source=viber_bot&utm_campaign=start'),
                new TextMessage('–î—è–∫—É—é –∑–∞ –Ω–µ–±–∞–π–¥—É–∂—ñ—Å—Ç—å!\n–¢—ñ–ª—å–∫–∏ —Ç–≤—ñ–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∑–º–æ–∂–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—É –≤–ª–∞–¥—É üá∫üá¶')
            ])
        }
    }

    unsubscribe () {
        return (userId) => {
            this.sessions.update({id: userId}, true)
            this.logger.info(`Unsubscribed: ${userId}`)
        }
    }

    received () {
        return (message, response) => {
            this.sessions.update(response.userProfile)

            if (!(message instanceof TextMessage)) {
                response.send(new TextMessage('–ü—ñ–¥—Ç—Ä–∏–º—É—é, —Ö–æ—á–∞ —ñ –Ω–µ —Ä–æ–∑—É–º—ñ—é —Ü—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è :)'))
            }
        }
    }

    anyText () { /* eslint class-methods-use-this: "off" */
        return (message, response) => {
            response.send(new TextMessage('–í–∏–±–∞—á, —è —â–µ –Ω–µ –≤–º—ñ—é —á–∏—Ç–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –≤—Å–µ –±—É–¥–µ –∑–≥–æ–¥–æ–º ;)'))
        }
    }

    async notify (changes) {
        if (!changes.length) {
            return
        }

        const that = this
        const userProfiles = this.sessions.getEnabledProfiles()
        const message = await this.makeMessage(changes)
        if (!message.length) {
            return
        }

        for (const userProfile of userProfiles) {
            this.bot.sendMessage(userProfile, [...message])
                .then(() => {
                    that.logger.info(`MADE notify ${userProfile.id}`)
                })
                .catch((error) => {
                    that.logger.error(`ERROR notify ${userProfile.id}`)
                    that.logger.error(error)
                })
        }
    }

    async makeMessage (changes) {
        const message = []

        for (const change of changes) {
            if (change.news) {
                const news = await this.clearText.clearMD(change.news) /* eslint no-await-in-loop: "off" */
                message.push(new TextMessage(news))
            } else if (change.measure === 'promise') {
                await this.addPromiseMessage(change, message) /* eslint no-await-in-loop: "off" */
            } else {
                await this.addIndicatorMessage(change, message) /* eslint no-await-in-loop: "off" */
            }
        }

        return message
    }

    async addPromiseMessage (change, message) {
        let statusMessage = ''

        if (change.newValue === 1) {
            statusMessage = '‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ!'
        } else if (change.newValue === 2) {
            statusMessage = '‚õîÔ∏è –ù–µ –≤–∏–∫–æ–Ω–∞–Ω–æ!'
        } else {
            return
        }

        const description = await this.clearText.clearMD(change.description)
        message.push(new TextMessage(`${statusMessage}\n${description}`))
    }

    async addIndicatorMessage (change, message) {
        const refURI = `https://www.checkpromise.info/${change.id}?utm_medium=referral&utm_source=viber_bot`
        const oddsValue = -(change.oldValue - change.newValue).toFixed(2)
        const isOldValueLess = change.oldValue < change.newValue
        const {link} = this.clearText.isShortenOn ? await this.clearText.getShorten(refURI) : {link: ''}

        message.push(new TextMessage(
            `${isOldValueLess === change.invertArrow ? 'üòÄ –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è!' : 'ü§¢ –ó—Ä–∞–¥–∞!'
            }\n${change.description} ${isOldValueLess ? '‚Üë' : '‚Üì'
            } ${change.newValue} ${change.quantity} ${change.measure} ${link
            } (${oddsValue > 0 ? '+' : ''}${oddsValue} ${change.measure})`)
        )
        if (!this.clearText.isShortenOn) {
            message.push(new UrlMessage(refURI))
        }
    }
}

module.exports = Notifier
